#pragma once
#include "IQuestion.h"
#include "string"
using namespace std;

//10. 正则表达式匹配
//给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
//
//'.' 匹配任意单个字符
//'*' 匹配零个或多个前面的那一个元素
//所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。
//

//44. 通配符匹配
//给定一个字符串(s) 和一个字符模式(p) ，实现一个支持 '?' 和 '*' 的通配符匹配。
//
//'?' 可以匹配任何单个字符。
//'*' 可以匹配任意字符串（包括空字符串）。
//两个字符串完全匹配才算匹配成功。
//
//说明 :
//
//s 可能为空，且只包含从 a - z 的小写字母。
//p 可能为空，且只包含从 a - z 的小写字母，以及字符 ? 和 * 。
//示例 1 :
//
//	输入 :
//	s = "aa"
//	p = "a"
//	输出 : false
//	解释 : "a" 无法匹配 "aa" 整个字符串。
//	示例 2 :
//
//	输入 :
//	s = "aa"
//	p = "*"
//	输出 : true
//	解释 : '*' 可以匹配任意字符串。
//	示例 3 :
//
//	输入 :
//	s = "cb"
//	p = "?a"
//	输出 : false
//	解释 : '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。

class Q_44 : public IQuestion
{
public:
	void Execute() override;
	bool isMatch(string& s,int startS,string& p,int startP);
};

